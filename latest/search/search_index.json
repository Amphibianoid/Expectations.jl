{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nThe goal of this package is to provide an intuitive and mathematically sound interface for taking expectations of random variables and their higher-order functions (i.e., if $X \\sim N(0, 1)$, what is $\\mathbb{E}[\\sin(X)]$?). \n\n\nThe underlying random variables are assumed to be distributions from \nDistributions.jl\n. Currently,  only univariate distributions are supported. \n\n\n\n\nInstallation\n\n\nTo install, run: \n\n\njulia\n Pkg.add(\nExpectations\n)\nWARNING: importing deprecated binding Base.Pkg into ex-default.\nWARNING: Base.Pkg is deprecated, run `using Pkg` instead\n  likely near /home/travis/build/econtoolkit/Expectations.jl/docs/make.jl:4\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\n\u001b[?25l\u001b[2K\u001b[?25h Resolving package versions...\n  Updating `~/.julia/environments/v0.7/Project.toml`\n [no changes]\n  Updating `~/.julia/environments/v0.7/Manifest.toml`\n [no changes]\n\n\n\n\nCurrently, Julia 0.6 and Julia 0.7 are supported. \n\n\n\n\nThe Expectation Operator\n\n\nThe key object in this package is an \nexpectation operator\n, or an object \n: Expectation\n. These include all objects capable of being called on a function; e.g. that support a method \nfunction (e::Expectation)(f::Function)\n. You can create these as following:\n\n\njulia\n dist = Normal();\nERROR: UndefVarError: Normal not defined\n\njulia\n E = expectation(dist)\nERROR: UndefVarError: expectation not defined\n\n\n\n\nYou can also choose and algorithms and default parameters (see below for list):\n\n\njulia\n E = expectation(dist, Gaussian; n = 30)\nERROR: UndefVarError: expectation not defined\n\n\n\n\nThese objects can then be applied to functions: \n\n\njulia\n E(x -\n x)\nERROR: UndefVarError: E not defined\n\njulia\n E(x -\n x^2)\nERROR: UndefVarError: E not defined\n\n\n\n\n\n\nIterableExpectation\n\n\nThe only concrete subtype of \nExpectation\n currently supported is \nIterableExpectation{NT, WT}\n. These are expectations for which we have a discrete vector of quadrature nodes and weights, either defined by user fiat, or set algorithmically. These support some additional behavior: \n\n\njulia\n nodeList = nodes(E)\nERROR: UndefVarError: nodes not defined\n\njulia\n vals = map(x -\n sin(x)^2, nodeList)\nERROR: UndefVarError: nodeList not defined\n\njulia\n E * vals\nERROR: UndefVarError: E not defined\n\njulia\n (2E) * vals\nERROR: UndefVarError: E not defined\n\n\n\n\nThe above behavior, in some sense, puts the \"operator\" in \"expectation operator\"; that is, it allows it to move elements of a vector space around,  and to be scalar-multiplied. \n\n\n\n\nSupported Distributions, Algorithms, Keywords, and Defaults\n\n\nHere is a list of currently supported distributions, along with keyword arguments and their defaults.  \n\n\n\n\n\n\n\n\nDistribution Name\n\n\nAlgorithm (Julia Type)\n\n\nKeywords and Defaults\n\n\nRestrictions\n\n\n\n\n\n\n\n\n\n\nDiscrete Univariate\n\n\nFiniteDiscrete \n: QuadratureAlgorithm\n\n\nN/A\n\n\nSupport must be finite.\n\n\n\n\n\n\nContinuous Univariate\n\n\nGauss-Legendre (Gaussian \n: QuadratureAlgorithm)\n\n\nn = 500\n\n\nSupport must be a compact interval $[a, b]$.\n\n\n\n\n\n\nNormal \n: Continuous Univariate\n\n\nGauss-Hermite (...)\n\n\nn = 30\n\n\nParameters must be finite.\n\n\n\n\n\n\nLogNormal \n: ...\n\n\nGauss-Hermite (...)\n\n\nn = 30\n\n\n...\n\n\n\n\n\n\nBeta \n: ...\n\n\nGauss-Jacobi (...)\n\n\nn = 32\n\n\n...\n\n\n\n\n\n\nExponential \n: ...\n\n\nGauss-Laguerre (...)\n\n\nn = 32\n\n\n...\n\n\n\n\n\n\nGamma \n: ...\n\n\nGauss-Laguerre (...)\n\n\nn = 32\n\n\n...\n\n\n\n\n\n\nUnivariate\n\n\nTrapezoidal \n: ExplicitQuadratureAlgorithm\n\n\nN/A\n\n\nAll nodes must be inside distribution's support.\n\n\n\n\n\n\n\n\n\n\nMathematical Details and References\n\n\nThe specific quadrature algorithms come from the \nFastGaussQuadrature.jl\n library, which is maintained by \nAlex Townsend\n of Cornell University. Much of the quadrature code came from the \nDistQuads.jl\n library, which is maintained by \nPatrick K. Mogensen\n at the University of Copenhagen. \n\n\n:warning: It is important to be aware of the deficiencies of numerical quadrature schemes. For example, it is recommended to be careful when using these methods for the following classes of functions and situations: \n\n\n\n\nDiscontinuous or nondifferentiable functions (even if the function is a.e.-differentiable)\n\n\nPeriodic/oscillatory functions with a high frequency\n\n\nExtremely large numbers of quadrature nodes, which may lead to vanishingly small weights.\n\n\n\n\n\n\nContact\n\n\nIf you would like to get in touch, please do one of the following:\n\n\n\n\nIssue requests: Open an issue on the \npackage repository\n with the tag \nfeature request\n.\n\n\nBugs: Same as above, but with the tag \nbug\n.\n\n\nPull Request: We are always open to new functionality. If you have a feature you'd like to add (say, a new distribution or algorithm), once you prepare a PR with the feature and some tests, open it in the usual way.\n\n\nOther: You can reach out to Jesse Perla at \njesse.perla@ubc.ca\n and Arnav Sood at \narnav.sood@ubc.ca\n\n\nCitation: If this package was helpful in your research work, you may consider citing the package in whatever method is appropriate for your field.", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "The goal of this package is to provide an intuitive and mathematically sound interface for taking expectations of random variables and their higher-order functions (i.e., if $X \\sim N(0, 1)$, what is $\\mathbb{E}[\\sin(X)]$?).   The underlying random variables are assumed to be distributions from  Distributions.jl . Currently,  only univariate distributions are supported.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "To install, run:   julia  Pkg.add( Expectations )\nWARNING: importing deprecated binding Base.Pkg into ex-default.\nWARNING: Base.Pkg is deprecated, run `using Pkg` instead\n  likely near /home/travis/build/econtoolkit/Expectations.jl/docs/make.jl:4\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\n\u001b[?25l\u001b[2K\u001b[?25h Resolving package versions...\n  Updating `~/.julia/environments/v0.7/Project.toml`\n [no changes]\n  Updating `~/.julia/environments/v0.7/Manifest.toml`\n [no changes]  Currently, Julia 0.6 and Julia 0.7 are supported.", 
            "title": "Installation"
        }, 
        {
            "location": "/#the-expectation-operator", 
            "text": "The key object in this package is an  expectation operator , or an object  : Expectation . These include all objects capable of being called on a function; e.g. that support a method  function (e::Expectation)(f::Function) . You can create these as following:  julia  dist = Normal();\nERROR: UndefVarError: Normal not defined\n\njulia  E = expectation(dist)\nERROR: UndefVarError: expectation not defined  You can also choose and algorithms and default parameters (see below for list):  julia  E = expectation(dist, Gaussian; n = 30)\nERROR: UndefVarError: expectation not defined  These objects can then be applied to functions:   julia  E(x -  x)\nERROR: UndefVarError: E not defined\n\njulia  E(x -  x^2)\nERROR: UndefVarError: E not defined", 
            "title": "The Expectation Operator"
        }, 
        {
            "location": "/#iterableexpectation", 
            "text": "The only concrete subtype of  Expectation  currently supported is  IterableExpectation{NT, WT} . These are expectations for which we have a discrete vector of quadrature nodes and weights, either defined by user fiat, or set algorithmically. These support some additional behavior:   julia  nodeList = nodes(E)\nERROR: UndefVarError: nodes not defined\n\njulia  vals = map(x -  sin(x)^2, nodeList)\nERROR: UndefVarError: nodeList not defined\n\njulia  E * vals\nERROR: UndefVarError: E not defined\n\njulia  (2E) * vals\nERROR: UndefVarError: E not defined  The above behavior, in some sense, puts the \"operator\" in \"expectation operator\"; that is, it allows it to move elements of a vector space around,  and to be scalar-multiplied.", 
            "title": "IterableExpectation"
        }, 
        {
            "location": "/#supported-distributions-algorithms-keywords-and-defaults", 
            "text": "Here is a list of currently supported distributions, along with keyword arguments and their defaults.       Distribution Name  Algorithm (Julia Type)  Keywords and Defaults  Restrictions      Discrete Univariate  FiniteDiscrete  : QuadratureAlgorithm  N/A  Support must be finite.    Continuous Univariate  Gauss-Legendre (Gaussian  : QuadratureAlgorithm)  n = 500  Support must be a compact interval $[a, b]$.    Normal  : Continuous Univariate  Gauss-Hermite (...)  n = 30  Parameters must be finite.    LogNormal  : ...  Gauss-Hermite (...)  n = 30  ...    Beta  : ...  Gauss-Jacobi (...)  n = 32  ...    Exponential  : ...  Gauss-Laguerre (...)  n = 32  ...    Gamma  : ...  Gauss-Laguerre (...)  n = 32  ...    Univariate  Trapezoidal  : ExplicitQuadratureAlgorithm  N/A  All nodes must be inside distribution's support.", 
            "title": "Supported Distributions, Algorithms, Keywords, and Defaults"
        }, 
        {
            "location": "/#mathematical-details-and-references", 
            "text": "The specific quadrature algorithms come from the  FastGaussQuadrature.jl  library, which is maintained by  Alex Townsend  of Cornell University. Much of the quadrature code came from the  DistQuads.jl  library, which is maintained by  Patrick K. Mogensen  at the University of Copenhagen.   :warning: It is important to be aware of the deficiencies of numerical quadrature schemes. For example, it is recommended to be careful when using these methods for the following classes of functions and situations:    Discontinuous or nondifferentiable functions (even if the function is a.e.-differentiable)  Periodic/oscillatory functions with a high frequency  Extremely large numbers of quadrature nodes, which may lead to vanishingly small weights.", 
            "title": "Mathematical Details and References"
        }, 
        {
            "location": "/#contact", 
            "text": "If you would like to get in touch, please do one of the following:   Issue requests: Open an issue on the  package repository  with the tag  feature request .  Bugs: Same as above, but with the tag  bug .  Pull Request: We are always open to new functionality. If you have a feature you'd like to add (say, a new distribution or algorithm), once you prepare a PR with the feature and some tests, open it in the usual way.  Other: You can reach out to Jesse Perla at  jesse.perla@ubc.ca  and Arnav Sood at  arnav.sood@ubc.ca  Citation: If this package was helpful in your research work, you may consider citing the package in whatever method is appropriate for your field.", 
            "title": "Contact"
        }
    ]
}